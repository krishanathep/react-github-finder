{"version":3,"sources":["components/layouts/Nav.jsx","components/users/Users.jsx","components/search/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","Navbar","bg","variant","Brand","className","Component","Users","Row","this","props","users","map","user","Col","md","Card","align","Body","key","id","Image","roundedCircle","src","avatar_url","width","Title","login","Text","Button","block","href","html_url","Search","handleChange","Form","Group","Control","type","placeholder","onChange","App","e","setState","searchField","target","value","state","bind","fetch","then","response","json","filteredUsers","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mSAiBeA,EAdf,iLAEQ,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,UAAUC,QAAQ,QACzB,kBAACF,EAAA,EAAOG,MAAR,KACI,uBAAGC,UAAU,kBADjB,wBALpB,GAAyBC,a,wCCwBVC,EAxBf,iLAEQ,OACI,6BACI,kBAACC,EAAA,EAAD,KACKC,KAAKC,MAAMC,MAAMC,KAAI,SAAAC,GAAI,OACtB,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,MAAM,UACR,kBAACD,EAAA,EAAKE,KAAN,CAAWC,IAAKN,EAAKO,GAAIP,KAAMA,GAC3B,kBAACQ,EAAA,EAAD,CAAOC,eAAa,EAACC,IAAKV,EAAKW,WAAYC,MAAM,UACjD,kBAACT,EAAA,EAAKU,MAAN,KAAab,EAAKc,OAClB,kBAACX,EAAA,EAAKY,KAAN,KACI,kBAACC,EAAA,EAAD,CAAQC,OAAK,EAAC3B,QAAQ,OAAO4B,KAAMlB,EAAKmB,UAAxC,0BAZxC,GAA2B1B,a,QCiBZ2B,EAjBO,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAH,OACP,kBAAC1B,EAAA,EAAD,KACI,kBAACM,EAAA,EAAD,KACK,kBAACqB,EAAA,EAAD,CAAM9B,UAAU,QACZ,kBAAC8B,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,QAAN,CACAhC,UAAU,SACViC,KAAK,SACLC,YAAY,YACZC,SAAUN,SCkC3BO,G,kBAvCb,aAAe,IAAD,8BACZ,+CAgBFP,aAAe,SAACQ,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAftC,EAAKC,MAAQ,CACXpC,MAAO,GACPiC,YAAa,IAGf,EAAKV,aAAe,EAAKA,aAAac,KAAlB,gBARR,E,iFAWO,IAAD,OAClBC,MAAM,gCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAvC,GAAK,OAAI,EAAKgC,SAAS,CAAChC,MAAOA,S,+BAO/B,IAAD,EACwBF,KAAKsC,MAA5BpC,EADD,EACCA,MAAOiC,EADR,EACQA,YACTS,EAAgB1C,EAAM2C,QAAO,SAAAzC,GAAI,OACrCA,EAAKc,MAAM4B,cAAcC,SAASZ,EAAYW,kBAGhD,OACE,yBAAKlD,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAQ6B,aAAczB,KAAKyB,eAC3B,kBAAC,EAAD,CAAOvB,MAAO0C,U,GAjCN/C,cCMEmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.50b03629.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Navbar } from 'react-bootstrap'\r\n\r\nexport class Nav extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar bg=\"success\" variant=\"dark\">\r\n                    <Navbar.Brand>\r\n                        <i className=\"fab fa-github\"></i> Github Finder \r\n                    </Navbar.Brand>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Nav\r\n","import React, { Component } from 'react'\r\nimport { Card, Row, Col, Image, Button } from 'react-bootstrap'\r\n\r\nexport class Users extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    {this.props.users.map(user => (\r\n                        <Col md={3}>\r\n                            <Card align=\"center\">\r\n                                <Card.Body key={user.id} user={user}>\r\n                                    <Image roundedCircle src={user.avatar_url} width=\"100px\"  />\r\n                                    <Card.Title>{user.login}</Card.Title>\r\n                                    <Card.Text>\r\n                                        <Button block variant=\"info\" href={user.html_url}>Read More</Button>\r\n                                    </Card.Text>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col>\r\n                    ))}\r\n                    </Row>   \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Users\r\n","import React, { Component } from 'react'\r\nimport { Form, Row, Col } from 'react-bootstrap'\r\n\r\nexport const Search = ({ handleChange }) => (\r\n               <Row>\r\n                   <Col>\r\n                        <Form className=\"mt-3\">\r\n                            <Form.Group>\r\n                                <Form.Control \r\n                                className=\"search\"\r\n                                type=\"search\" \r\n                                placeholder=\"Search...\" \r\n                                onChange={handleChange}    \r\n                            />\r\n                            </Form.Group>\r\n                        </Form>\r\n                   </Col>\r\n                </Row> \r\n)\r\n\r\nexport default Search\r\n","import React, { Comment, Component } from 'react'\nimport Nav from './components/layouts/Nav'\nimport Users from './components/users/Users'\nimport Search from './components/search/Search'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      users: [],\n      searchField: ''\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  componentDidMount() {\n    fetch('https://api.github.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({users: users}))\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { users, searchField } = this.state\n    const filteredUsers = users.filter(user =>\n      user.login.toLowerCase().includes(searchField.toLowerCase())\n    )\n\n    return (\n      <div className=\"App\">\n        <Nav />\n        <div className=\"container\">\n          <Search handleChange={this.handleChange} />\n          <Users users={filteredUsers} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}