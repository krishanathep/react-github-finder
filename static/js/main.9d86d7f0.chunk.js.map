{"version":3,"sources":["components/layouts/Nav.jsx","components/layouts/Spinners.jsx","components/users/Users.jsx","components/search/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","Navbar","bg","variant","Brand","className","Component","Spinners","align","class","Users","this","props","loading","Row","users","map","user","Col","md","Card","Body","key","id","Image","roundedCircle","src","avatar_url","width","Title","login","Text","Button","block","href","html_url","Search","handleChange","Form","Group","Control","type","placeholder","onChange","App","e","setState","searchField","target","value","state","bind","axios","get","res","data","filteredUsers","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4TAiBeA,EAdf,iLAEQ,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,UAAUC,QAAQ,QACzB,kBAACF,EAAA,EAAOG,MAAR,KACI,uBAAGC,UAAU,kBADjB,wBALpB,GAAyBC,a,wCCSVC,EAVf,iLAEQ,OACI,yBAAKF,UAAU,UAAUG,MAAM,UAC3B,yBAAKC,MAAM,mCAJ3B,GAA8BH,aCqCfI,EAnCf,iLAEQ,OAAIC,KAAKC,MAAMC,QACJ,kBAAC,EAAD,MAGH,yBAAKR,UAAU,SACX,kBAACS,EAAA,EAAD,KACKH,KAAKC,MAAMG,MAAMC,KAAI,SAAAC,GAAI,OACtB,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMf,UAAU,OAAOG,MAAM,UACzB,kBAACY,EAAA,EAAKC,KAAN,CAAWC,IAAKL,EAAKM,GAAIN,KAAMA,GAC3B,kBAACO,EAAA,EAAD,CACIC,eAAa,EACbC,IAAKT,EAAKU,WACVC,MAAM,UAEV,kBAACR,EAAA,EAAKS,MAAN,KAAaZ,EAAKa,OAClB,kBAACV,EAAA,EAAKW,KAAN,KACI,kBAACC,EAAA,EAAD,CACIC,OAAK,EAAC9B,QAAQ,OACd+B,KAAMjB,EAAKkB,UAFf,0BAnB5C,GAA2B7B,a,QCgBZ8B,EAjBO,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAH,OACP,kBAACvB,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,KACK,kBAACoB,EAAA,EAAD,CAAMjC,UAAU,QACZ,kBAACiC,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,QAAN,CACAnC,UAAU,SACVoC,KAAK,SACLC,YAAY,YACZC,SAAUN,S,iBCwC3BO,G,kBA1Cb,aAAe,IAAD,8BACZ,+CAmBFP,aAAe,SAACQ,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAlBtC,EAAKC,MAAQ,CACXnC,MAAO,GACPgC,YAAa,GACblC,SAAS,GAGX,EAAKwB,aAAe,EAAKA,aAAac,KAAlB,gBATR,E,wMAaZxC,KAAKmC,SAAS,CAAEjC,SAAS,I,SAEPuC,IAAMC,IAAI,gC,OAAtBC,E,OAEN3C,KAAKmC,SAAS,CAAE/B,MAAOuC,EAAIC,KAAM1C,SAAS,I,qIAOlC,IAAD,EACwBF,KAAKuC,MAA5BnC,EADD,EACCA,MAAOgC,EADR,EACQA,YACTS,EAAgBzC,EAAM0C,QAAO,SAAAxC,GAAI,OACrCA,EAAKa,MAAM4B,cAAcC,SAASZ,EAAYW,kBAGhD,OACE,yBAAKrD,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAQgC,aAAc1B,KAAK0B,eAC3B,kBAAC,EAAD,CAAOtB,MAAOyC,EAAe3C,QAASF,KAAKuC,MAAMrC,gB,GApCzCP,cCGEsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9d86d7f0.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Navbar } from 'react-bootstrap'\n\nexport class Nav extends Component {\n    render() {\n        return (\n            <div>\n                <Navbar bg=\"primary\" variant=\"dark\">\n                    <Navbar.Brand>\n                        <i className=\"fab fa-github\"></i> Github Finder \n                    </Navbar.Brand>\n                </Navbar>\n            </div>\n        )\n    }\n}\n\nexport default Nav\n","import React, { Component } from 'react'\n\nexport class Spinners extends Component {\n    render() {\n        return (\n            <div className=\"Spiners\" align=\"center\">\n                <div class=\"spinner-border text-muted\"></div>\n            </div>\n        )\n    }\n}\n\nexport default Spinners\n","import React, { Component } from 'react'\nimport { Card, Row, Col, Image, Button } from 'react-bootstrap'\nimport Spinners from '../layouts/Spinners'\n\nexport class Users extends Component {\n    render() {\n        if (this.props.loading) {\n            return <Spinners />\n        } else {\n            return (\n                <div className=\"Users\">\n                    <Row>\n                        {this.props.users.map(user => (\n                            <Col md={3}>\n                                <Card className=\"mt-2\" align=\"center\">\n                                    <Card.Body key={user.id} user={user}>\n                                        <Image\n                                            roundedCircle\n                                            src={user.avatar_url}\n                                            width=\"100px\"\n                                        />\n                                        <Card.Title>{user.login}</Card.Title>\n                                        <Card.Text>\n                                            <Button\n                                                block variant=\"info\"\n                                                href={user.html_url}>\n                                                Read More\n                                        </Button>\n                                        </Card.Text>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        ))}\n                    </Row>\n                </div>\n            )\n        }\n    }\n}\nexport default Users\n","import React, { Component } from 'react'\nimport { Form, Row, Col } from 'react-bootstrap'\n\nexport const Search = ({ handleChange }) => (\n               <Row>\n                   <Col>\n                        <Form className=\"mt-3\">\n                            <Form.Group>\n                                <Form.Control \n                                className=\"search\"\n                                type=\"search\" \n                                placeholder=\"Search...\" \n                                onChange={handleChange}    \n                            />\n                            </Form.Group>\n                        </Form>\n                   </Col>\n                </Row> \n)\n\nexport default Search\n","import React, { Component } from 'react'\nimport Nav from './components/layouts/Nav'\nimport Users from './components/users/Users'\nimport Search from './components/search/Search'\nimport axios from 'axios'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      users: [],\n      searchField: '',\n      loading: false\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  async componentDidMount() {\n    this.setState({ loading: true })\n\n    const res = await axios.get('https://api.github.com/users')\n\n    this.setState({ users: res.data, loading: false })\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { users, searchField } = this.state\n    const filteredUsers = users.filter(user =>\n      user.login.toLowerCase().includes(searchField.toLowerCase())\n    )\n\n    return (\n      <div className=\"App\">\n        <Nav />\n        <div className=\"container\">\n          <Search handleChange={this.handleChange} />\n          <Users users={filteredUsers} loading={this.state.loading} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}